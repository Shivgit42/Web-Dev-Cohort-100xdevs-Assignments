/*
Assignment #3 - You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.

- Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)
    Each todo has a title and a description. The title is a string and the description is a string.
    Each todo should also get an unique autogenerated id every time it is created
   
   The expected API endpoints are defined below,

1. GET `/todos` - Retrieve all todo items
   Description: Returns a list of all todo items.
   Response: 200 OK with an array of todo items in JSON format.
   Example: GET http://localhost:3000/todos

2. GET `/todos/:id` - Retrieve a specific todo item by ID
   Description: Returns a specific todo item identified by its ID.
   Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
   Example: GET http://localhost:3000/todos/123

3. POST `/todos` - Create a new todo item
   Description: Creates a new todo item.
   Request Body: JSON object representing the todo item.
   Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
   Example: POST http://localhost:3000/todos
   Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

4. PUT `/todos/:id` - Update an existing todo item by ID
   Description: Updates an existing todo item identified by its ID.
   Request Body: JSON object representing the updated todo item.
   Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
   Example: PUT http://localhost:3000/todos/123
   Request Body: { "title": "Buy groceries", "completed": true }

5. DELETE `/todos/:id` - Delete a todo item by ID
   Description: Deletes a todo item identified by its ID.
   Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
   Example: DELETE http://localhost:3000/todos/123
   
- For any other route not defined in the server return 404
*/

const express = require("express");
const fs = require("fs");
const app = express();
app.use(express.json());

const TODOS_FILE = "todos.json";

// Helper: Read todos from file
function readTodos() {
  try {
    const data = fs.readFileSync(TODOS_FILE, "utf-8");
    return JSON.parse(data);
  } catch {
    return []; // return empty if file doesn't exist or is invalid
  }
}

// Helper: Write todos to file
function writeTodos(todos) {
  fs.writeFileSync(TODOS_FILE, JSON.stringify(todos, null, 2));
}

// GET /todos
app.get("/todos", (req, res) => {
  const todos = readTodos();
  res.status(200).json(todos);
});

// GET /todos/:id
app.get("/todos/:id", (req, res) => {
  const todos = readTodos();
  const todo = todos.find((t) => t.id === parseInt(req.params.id));
  if (!todo) return res.status(404).send("Todo not found");
  res.status(200).json(todo);
});

// POST /todos
app.post("/todos", (req, res) => {
  const { title, description, completed = false } = req.body;
  if (!title || !description) {
    return res.status(400).send("Title and description are required");
  }

  const todos = readTodos();
  const id = Math.floor(Math.random() * 10000); // simple unique ID
  const newTodo = { id, title, description, completed };
  todos.push(newTodo);
  writeTodos(todos);
  res.status(201).json({ id });
});

// PUT /todos/:id
app.put("/todos/:id", (req, res) => {
  const { title, description, completed } = req.body;
  const todos = readTodos();
  const index = todos.findIndex((t) => t.id === parseInt(req.params.id));

  if (index === -1) return res.status(404).send("Todo not found");

  if (title !== undefined) todos[index].title = title;
  if (description !== undefined) todos[index].description = description;
  if (completed !== undefined) todos[index].completed = completed;

  writeTodos(todos);
  res.status(200).send("Todo updated");
});

// DELETE /todos/:id
app.delete("/todos/:id", (req, res) => {
  let todos = readTodos();
  const newTodos = todos.filter((t) => t.id !== parseInt(req.params.id));

  if (newTodos.length === todos.length) {
    return res.status(404).send("Todo not found");
  }

  writeTodos(newTodos);
  res.status(200).send("Todo deleted");
});

// 404 for undefined routes
app.use((req, res) => {
  res.status(404).send("Route not found");
});

app.listen(3000, () => {
  console.log("ğŸš€ Server running on port 3000");
});
